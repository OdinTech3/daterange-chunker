import datetime as dt
from enaml.widgets.api import (
    Window,
    Container,
    PushButton,
    Form,
    Html,
)
from enaml.stdlib.fields import IntField
from enaml.layout.api import vbox, align
from enaml.styling import StyleSheet, Style, Setter
from enaml.icon import Icon, IconImage
from enaml.image import Image
from daterange_chunker.views.DateRangeForm import FormView
from daterange_chunker import datetuils as du
from daterange_chunker import resource_path


def load_img(resrc: str):
    return Image(data=open(resource_path(resrc), 'rb').read())


def to_icon_img(img):
    return IconImage(image=img)


enamldef AppView(Window): _self:
    title = "Date Range Chunker"
    initial_size = (600, 700)
    minimum_size = (600, 700)
    background = '#BDBDBD'
    icon = Icon(images=[to_icon_img(load_img("daterange-chunker.png"))])

    attr start_date: dt.date = dt.date.today()
    attr end_date: dt.date = dt.date.today()
    attr num_of_chunks: int = 1
    attr html_source: str = ''

    StyleSheet:
        Style:
            element = 'PushButton'
            style_class = 'btn'

            Setter:
                field = 'background'
                value = '#009688'
            Setter:
                field = 'padding'
                value = '0.6em'
            Setter:
                field = 'color'
                value = 'white'
            Setter:
                field = 'border-radius'
                value = '10px'

        Style:
            element = 'PushButton'
            style_class = 'btn'
            pseudo_class = 'pressed'

            Setter:
                field = 'background'
                value = '#004D46'

        Style:
            style_class = 'form'

            Setter:
                field = 'background'
                value = '#FFFFFF'
            Setter:
                field = 'border-radius'
                value = '5px'

        Style:
            style_class = 'html-output'

            Setter:
                field = 'padding'
                value = '0.5em'

    func create_list(list_items):
        return f"""
        <ol>
            {list_items}
        </ol>
        """

    func to_list_items(chunks):
        start, end = chunks
        return f"<li>{start} - {end}</li>"

    func create_error_msg(msg):
        return f"""
        <center>
            <p style="color:red;">{msg}</p>
        </center>
        """

    func validate(start_date, end_date, delta):
        if du.is_delta_neg(start_date, end_date):
            msg = "Start date can not be greater than end date."
            _self.html_source = _self.create_error_msg(msg)

            return False

        elif not du.is_delta_gte_aday(delta):
            msg = f"Can not create chunk(s) spanning {delta} hrs, must be greater than a day"
            _self.html_source = _self.create_error_msg(msg)

            return False

        else:
            return True

    Container:
        padding = 20
        constraints = [
            vbox(dtr_form, chunk_btn, html_output, spacing=30),
            align('h_center', dtr_form, chunk_btn)
        ]

        FormView: dtr_form:
            style_class = 'form'
            start_date := _self.start_date
            end_date := _self.end_date
            num_of_chunks := _self.num_of_chunks
            num_of_chunks ::
                delta = du.calc_delta(_self.start_date, _self.end_date, _self.num_of_chunks)

                if _self.validate(_self.start_date, _self.end_date, delta):
                    _self.html_source = f"""
                        <center>
                            <p>{num_of_chunks} chunk(s) will be created each spanning {delta} hrs</p>
                        </center>
                        """

        PushButton: chunk_btn:
            style_class = 'btn'
            text = "Chunk It!"
            clicked ::
                delta = du.calc_delta(_self.start_date, _self.end_date, _self.num_of_chunks)

                if _self.validate(_self.start_date, _self.end_date, delta):
                    chunks = du.chunk(_self.start_date, _self.end_date, delta)
                    dates = map(du.fmt_dates, chunks)
                    list_items = "\n".join(map(_self.to_list_items, dates))
                    _self.html_source = _self.create_list(list_items)

        Html: html_output:
            style_class = 'html-output'
            source << _self.html_source
